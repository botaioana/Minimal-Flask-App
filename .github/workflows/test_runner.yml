name: Security Scan and Deploy to EC2
on: [push]

env:
  APP_INSTANCE: 'ec2-user@13.61.7.35'
  PROJECT_DIR: '/home/ec2-user/Minimal-Flask-App'
  DOCKER_IMAGE: 'flask-app'
  DOCKER_TAG: 'latest'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'python'
          config-file: ./.github/codeql/codeql-config.yml  # All config goes here

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        
  deploy:
    needs: security-scan  # Fixed to match the actual job name above
    runs-on: [self-hosted, linux]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH key for target instance
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup EC2 environment (on target instance)
        run: |
          ssh -o StrictHostKeyChecking=no $APP_INSTANCE "
            sudo dnf update -y
            sudo dnf install -y docker git
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo usermod -aG docker ec2-user
            mkdir -p $PROJECT_DIR
            [ ! -d '$PROJECT_DIR/.git' ] && git clone https://github.com/botaioana/Minimal-Flask-App.git $PROJECT_DIR || true
          "

      - name: Sync code to target instance
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
            --exclude='.git/' \
            --exclude='.github/' \
            --delete ./ $APP_INSTANCE:$PROJECT_DIR/

      - name: Deploy Docker container
        run: |
          ssh -o StrictHostKeyChecking=no $APP_INSTANCE "
            cd $PROJECT_DIR
            docker build --no-cache -t $DOCKER_IMAGE:$DOCKER_TAG .
            docker ps -aq --filter name=$DOCKER_IMAGE | xargs -r docker stop | xargs -r docker rm || true
            docker run -d \
              --name $DOCKER_IMAGE \
              -p 80:5000 \
              -e FLASK_ENV=production \
              --restart unless-stopped \
              $DOCKER_IMAGE:$DOCKER_TAG
          "
  zap-scan:
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      issues: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Run ZAP baseline scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://13.60.46.132'
          fail_action: false
          issue_title: 'Security alert detected by ZAP'
          cmd_options: '-n' # no reports or zap.yaml written

